{"version":3,"file":"static/js/669.2f9f4dba.chunk.js","mappings":"sRAGaA,EAAYC,EAAAA,GAAAA,GAAH,8CAITC,EAAWD,EAAAA,GAAAA,GAAH,qJAQRE,EAAQF,EAAAA,GAAAA,GAAH,mTAQGG,EAAAA,GAAAA,OAGAA,EAAAA,GAAAA,SAKRC,EAAQJ,EAAAA,GAAAA,IAAH,kLAKOG,EAAAA,GAAAA,QAKZE,EAAeL,EAAAA,GAAAA,EAAH,4G,qGCtCZM,EAAeN,EAAAA,GAAAA,IAAH,0WAiBb,SAAAO,GAAK,OAAIA,EAAMC,MAAMC,OAAhB,IACJ,SAAAF,GAAK,OAAIA,EAAMC,MAAME,GAAhB,IAILC,EAAeX,EAAAA,GAAAA,EAAH,8LAEZ,SAAAO,GAAK,OAAIA,EAAMC,MAAME,GAAhB,GAGOP,EAAAA,GAAAA,Q,SC3BZS,EAAQ,WACjB,OAAQ,UAACN,EAAD,YACR,SAAC,MAAD,KAAa,SAACK,EAAD,UAAc,2BAE9B,C,+LCJYE,E,QAAQb,GAAAA,OAAH,4MAIOG,EAAAA,GAAAA,OAGAA,EAAAA,GAAAA,S,iDCGnBW,EAAkB,CACpBC,QAAS,CAAEC,QAAS,GACpBC,KAAM,CAAED,QAAS,EAAGE,WAAY,CAAEC,KAAM,YAmD5C,EAhDgB,WACZ,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA4BF,EAAAA,EAAAA,UAASG,EAAAA,GAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,IAAYC,EAAAA,IACrBC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WAAM,wCAEZ,kHAE6BC,EAAAA,EAAAA,IAAcH,EAASH,GAFpD,OAEcO,EAFd,OAGcC,EAAUR,IAAaS,EAAAA,EAAAA,IAAgB,mBAAqB,oGAC5Dd,EAAUY,EAAOG,QAAQC,MAAK,qBAAGC,KAAgBC,cAAcC,SAASN,EAA1C,IACpCZ,EAAWD,GACXI,EAAUF,EAAAA,GAAAA,UANlB,yDAQQE,EAAUF,EAAAA,GAAAA,UARlB,8EAFY,sBACZE,EAAUF,EAAAA,GAAAA,SADE,mCAcZkB,EACH,GAAE,CAACZ,EAASH,IAETF,IAAWD,EAAAA,GAAAA,UACH,SAACX,EAAA,EAAD,IACDY,IAAWD,EAAAA,GAAAA,SACV,SAACmB,EAAA,EAAD,IACDlB,IAAWD,EAAAA,GAAAA,MACV,SAAC,KAAD,UAAW,qBACZC,IAAWD,EAAAA,GAAAA,UACV,UAACoB,EAAA,MAAD,CACJ5B,QAAS,UACT6B,QAAS,OACTC,SAAU/B,EAHN,WAIJ,SAAC,KAAD,UAAYY,IAAaS,EAAAA,EAAAA,IAAgB,mBAAqB,sGAC7Dd,GACG,SAACR,EAAD,CACIiC,IAAG,wCAAmCzB,EAAQ0B,KAC9CC,MAAM,mBACNC,MAAM,kFACNC,iBAAe,EACfC,eAAe,iBAEjB,uBAAIzB,IAAaS,EAAAA,EAAAA,IAAgB,uBAAyB,4FAdjE,CAiBV,C","sources":["components/Cast/Cast.styled.jsx","components/Error/Error.styled.jsx","components/Error/Error.jsx","components/Trailer/Trailer.styled.jsx","components/Trailer/Trailer.jsx"],"sourcesContent":["import { devices } from \"constants\";\nimport styled from \"styled-components\";\n\nexport const CastTitle = styled.h2`\nmargin-bottom: 10px;\n`\n\nexport const CastList = styled.ul`\ndisplay: flex;\nflex-direction: row;\nflex-wrap: wrap;\nmargin: -5px;\ntransition: all 250ms cubic-bezier(0.4, 0, 0.2, 1); \n`;\n\nexport const Actor = styled.li`\nwidth: calc((100% - 6 * 5px) / 3);\nmargin: 5px;\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\npadding: 5px;\n\tbox-sizing: border-box;\n@media screen and (${devices.tablet}){\n    width: calc((100% - 10 * 5px) / 5);\n}\n@media screen and (${devices.desktop}){\n    width: calc((100% - 14 * 5px) / 7);\n}\n`\n\nexport const Photo = styled.img`\n    width: 100%;\n    height: 150px;\n    object-fit: contain;\n    object-position: center;\n    @media screen and (${devices.tablet}){\n        height: 200px;\n    }\n`\n\nexport const ActorCredits = styled.p`\n    font-size: 14px;\n    font-family: 'Prompt', sans-serif;\n    line-height: 1.4;\n`","import { devices } from \"constants\";\nimport styled from \"styled-components\";\n\nexport const ErrorWrapper = styled.div`\nposition: fixed;\ntop: 50%;\nleft: 50%;\nbackground-color: rgba(0, 0, 0, 0.2);\ntransform: translate(-50%, -50%);\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\nwidth: 100%;\nheight: 100%;\nz-index: 99;\ngap: 10px;\n& svg {\n    width: 70px;\n    height: 70px;\n    fill: ${props => props.theme.darkRed};\n    color: ${props => props.theme.red};\n}\n`\n\nexport const ErrorMessage = styled.p`\n    font-size: 22px;\n    color: ${props => props.theme.red};\n    font-weight: 700;\n    font-family: 'Prompt', sans-serif;\n    @media screen and (${devices.tablet}) {\n        font-size: 30px;\n    }\n`","import {TbError404} from 'react-icons/tb'\nimport { ErrorMessage, ErrorWrapper } from './Error.styled'\n\nexport const Error = () => {\n    return (<ErrorWrapper>\n    <TbError404/><ErrorMessage>Something went wrong</ErrorMessage>\n    </ErrorWrapper>)\n}","import { devices } from \"constants\";\nimport styled from \"styled-components\";\n\nexport const Video = styled.iframe`\n    height: 200px;\n    width: 100%;\n    border: none;\n    @media screen and (${devices.tablet}) {\n        height: 500px;\n    }\n    @media screen and (${devices.desktop}) {\n        height: 700px;\n    }\n`","import { CastTitle } from \"components/Cast/Cast.styled\";\nimport { Error } from \"components/Error/Error\";\nimport { Loader } from \"components/Loader/Loader\";\nimport { STATUS } from \"constants\";\nimport { getMovieVideo } from \"helpers/api\";\nimport { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\";\nimport { Video } from \"./Trailer.styled\";\nimport { motion } from \"framer-motion\";\nimport { useSelector } from \"react-redux\";\nimport { selectLanguage } from \"redux/films/selectors\";\nimport { LANGUAGES } from \"redux/films/constants\";\n\nconst trailerVariants = {\n    initial: { opacity: 0 },\n    isOn: { opacity: 1, transition: { type: \"spring\" } },\n}\n\nconst Trailer = () => {\n    const [trailer, setTrailer] = useState(null);\n    const [status, setStatus] = useState(STATUS.IDLE);\n    const language = useSelector(selectLanguage);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        setStatus(STATUS.PENDING)\n        async function fetchData() {\n            try {\n                const videos = await getMovieVideo(movieId, language);\n                const keyword = language === LANGUAGES.ENG ? 'official trailer' : 'офіційний трейлер';\n                const trailer = videos.results.find(({ name }) => name.toLowerCase().includes(keyword));\n                setTrailer(trailer);\n                setStatus(STATUS.RESOLVED);\n            } catch (e) {\n                setStatus(STATUS.REJECTED)\n                return;\n            }\n        }\n        fetchData()\n    }, [movieId, language])\n\n    if (status === STATUS.REJECTED) {\n        return (<Error />);\n    } else if (status === STATUS.PENDING) {\n        return (<Loader />);\n    } else if (status === STATUS.IDLE) {\n        return (<CastTitle>Official Trailer</CastTitle>)\n    } else if (status === STATUS.RESOLVED) {\n        return (<motion.div\n            initial={\"initial\"}\n            animate={\"isOn\"}\n            variants={trailerVariants}>\n            <CastTitle>{language === LANGUAGES.ENG ? 'Official Trailer' : 'Офіційний трейлер'}</CastTitle>\n            {trailer ?\n                <Video\n                    src={`https://www.youtube.com/embed/${trailer.key}`}\n                    title=\"Official Trailer\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; web-share\"\n                    allowFullScreen\n                    referrerPolicy=\"no-referrer\"\n                ></Video>\n                : <p>{language === LANGUAGES.ENG ? 'No trailer available' : 'Немає трейлеру'}</p>}\n        </motion.div>)\n    }\n}\n\nexport default Trailer;"],"names":["CastTitle","styled","CastList","Actor","devices","Photo","ActorCredits","ErrorWrapper","props","theme","darkRed","red","ErrorMessage","Error","Video","trailerVariants","initial","opacity","isOn","transition","type","useState","trailer","setTrailer","STATUS","status","setStatus","language","useSelector","selectLanguage","movieId","useParams","useEffect","getMovieVideo","videos","keyword","LANGUAGES","results","find","name","toLowerCase","includes","fetchData","Loader","motion","animate","variants","src","key","title","allow","allowFullScreen","referrerPolicy"],"sourceRoot":""}