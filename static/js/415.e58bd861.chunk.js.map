{"version":3,"file":"static/js/415.e58bd861.chunk.js","mappings":"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","sources":["components/Error/Error.styled.jsx","components/Error/Error.jsx","components/MovieCard/MovieCard.styled.jsx","components/MovieCard/MovieCard.jsx","components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","components/TypedTitle/TypedTitle.styled.jsx","components/TypedTitle/TypedTitle.jsx","pages/Home.jsx","webpack://moviebase/./src/components/Pagination/Pagination.module.css?4da5"],"sourcesContent":["import { devices } from \"constants\";\nimport styled from \"styled-components\";\n\nexport const ErrorWrapper = styled.div`\nposition: fixed;\ntop: 50%;\nleft: 50%;\nbackground-color: rgba(0, 0, 0, 0.2);\ntransform: translate(-50%, -50%);\ndisplay: flex;\nflex-direction: row;\njustify-content: center;\nalign-items: center;\nwidth: 100%;\nheight: 100%;\nz-index: 99;\ngap: 10px;\n& svg {\n    width: 70px;\n    height: 70px;\n    fill: ${props => props.theme.darkRed};\n    color: ${props => props.theme.red};\n}\n`\n\nexport const ErrorMessage = styled.p`\n    font-size: 22px;\n    color: ${props => props.theme.red};\n    font-weight: 700;\n    font-family: 'Prompt', sans-serif;\n    @media screen and (${devices.tablet}) {\n        font-size: 30px;\n    }\n`","import {TbError404} from 'react-icons/tb'\nimport { ErrorMessage, ErrorWrapper } from './Error.styled'\n\nexport const Error = () => {\n    return (<ErrorWrapper>\n    <TbError404/><ErrorMessage>Something went wrong</ErrorMessage>\n    </ErrorWrapper>)\n}","import styled from \"styled-components\";\nimport { devices } from \"constants\";\nimport { motion } from 'framer-motion';\n\nexport const Card = styled(motion.li)`\n    width: calc((100% - 5px * 4) / 2);\n    margin: 5px;\n    background-color: transparent;\n    transition: all 250ms cubic-bezier(0.4, 0, 0.2, 1); \n    height: auto;\n    @media screen and (${devices.tablet}){\n        width: calc((100% - 5px * 6) / 3);\n    }\n    @media screen and (${devices.desktop}) {\n        width: calc((100% - 8px * 8) / 4);\n        margin: 8px;\n    }\n    &:hover, &:focus {\n        transform: scale(1.04);\n    }\n`\n\nexport const PosterWrapper = styled.div`\n    position: relative;\n`\n\nexport const Poster = styled(motion.img)`\n    height: 220px;\n    width: 100%;\n    @media screen and (${devices.tablet}) {\n        height: 370px;\n    } \n    @media screen and (${devices.desktop}) {\n        height: 320px;\n    } \n`\n\nexport const Title = styled.p`\n    font-size: 20px;\n    text-align: center;\n    margin-top: 8px;\n`\n\nexport const Rate = styled.span`\n    position: absolute;\n    top: 5px;\n    right: 5px;\n    color: ${props => props.theme.beige};\n    padding: 2px 4px;\n    border-radius: 8px;\n    border: 1px solid ${props => props.theme.beige};\n    ${(props) => {\n        switch (props.rateType) {\n            case 'good':\n                return `background-color: #295f48;`;\n            case 'bad':\n                return `background-color: #440700`;\n            case 'coming': \n                return 'background-color: rgba(0, 0, 0, 0.5)';\n            default:\n                return `background-color: #295f48;`;\n        }\n    }}\n`","import PropTypes from \"prop-types\";\nimport { Link } from 'react-router-dom';\nimport { Card, Title, Rate, Poster, PosterWrapper } from \"./MovieCard.styled\"\nimport { imagePath } from \"constants\";\nimport { useSelector } from \"react-redux\";\nimport { selectLanguage } from \"redux/films/selectors\";\nimport { LANGUAGES } from \"redux/films/constants\";\n\nconst cardVariants = {\n    initial: { opacity: 0 },\n    isOn: { opacity: 1, transition: { type: \"spring\" } },\n}\n\nexport const MovieCard = ({ id, poster, title, rate, path }) => {\n    const currentLanguage = useSelector(selectLanguage)\n    return (\n        <Card\n            initial={\"initial\"}\n            animate={\"isOn\"}\n            variants={cardVariants}>\n            <Link to={`/movies/${id}`} state={path}>\n                <PosterWrapper>\n                    <Poster\n                        src={poster \n                            ? `${imagePath.default}${poster}`\n                            : imagePath.sample}\n                        alt={title} \n                        width=\"140\"\n                        loading=\"lazy\" />\n                    <Rate rateType={rate <= 0 ? 'coming' : rate > 6 ? 'good' : 'bad'}>\n                        {rate > 0 ? rate.toFixed(1) \n                        : (currentLanguage === LANGUAGES.ENG ? 'soon' : 'скоро')}</Rate>\n                </PosterWrapper>\n            </Link>\n            <Title>{title}</Title>\n        </Card>\n    )\n}\n\nMovieCard.propTypes = {\n    id: PropTypes.number,\n    poster: PropTypes.string,\n    title: PropTypes.string.isRequired,\n    rate: PropTypes.number.isRequired,\n    path: PropTypes.object.isRequired\n}","import styled from \"styled-components\";\nimport { devices } from \"constants\";\n\nexport const ListWrapper = styled.ul`\n    padding-bottom: 40px;\n    padding-top: 20px;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    margin: -5px;\n    @media screen and (${devices.desktop}) {\n        margin: -8px;\n    }\n`\n\nexport const Pagination = styled.div`\n    display: flex;\n    flex-direction: column;\n    @media screen and (${devices.desktop}) {\n        min-width: 800px;\n    }\n`;\n","import { MovieCard } from \"components/MovieCard/MovieCard\"\nimport { ListWrapper, Pagination } from \"./MovieList.styled\";\nimport { useLocation, useSearchParams } from \"react-router-dom\";\nimport { useState} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectMovies, selectTotalPages, selectIsFiltered} from \"redux/films/selectors\";\nimport ReactPaginate from 'react-paginate';\nimport css from 'components/Pagination/Pagination.module.css';\nimport { setPage } from \"redux/films/filmsSlice\";\nimport { useEffect, useRef } from \"react\";\n\nexport const MovieList = () => {\n    const location = useLocation();\n    const [searchParams, setSearchParams] = useSearchParams({ page: 1 });\n    const currentPage = Number(searchParams.get(\"page\"));\n    const [paginationPage, setPaginationPage] = useState(0);\n    const movies = useSelector(selectMovies);\n    const totalPages = useSelector(selectTotalPages);\n    const dispatch = useDispatch();\n    const isFiltered = useSelector(selectIsFiltered);\n    const isFilteredRef = useRef(isFiltered)\n\n    const pagesCount = Math.ceil(totalPages) > 500 ? 500 : Math.ceil(totalPages);\n\n    useEffect(() => {\n        if (isFiltered !== isFilteredRef.current) {\n            dispatch(setPage(1));\n            setSearchParams({ page: 1 });\n            setPaginationPage(0);\n            isFilteredRef.current = isFiltered;\n\n        }\n    }, [isFiltered, dispatch, setSearchParams])\n\n    useEffect(() => {\n        dispatch(setPage(currentPage));\n    }, [dispatch, currentPage])\n\n    const loadMore = (event) => {\n        setSearchParams({ page: event.selected + 1 });\n        setPaginationPage(event.selected);\n    }\n\n    return (\n        <Pagination>\n            <ListWrapper>\n                {movies.map(({ title, poster_path, vote_average, id }) =>\n                (<MovieCard\n                    title={title}\n                    poster={poster_path}\n                    key={id}\n                    rate={vote_average}\n                    id={id}\n                    path={{ from: location }}\n                />))}\n            </ListWrapper>\n            {movies.length > 0 && <ReactPaginate\n                containerClassName={css.pagination__container}\n                pageClassName={css.pagination__page}\n                activeClassName={css.selected}\n                previousClassName={css.pagination__arrow}\n                nextClassName={css.pagination__arrow}\n                disabledClassName={css.disabled}\n                breakLabel=\"...\"\n                nextLabel=\">>\"\n                onPageChange={loadMore}\n                pageRangeDisplayed={1}\n                pageCount={pagesCount}\n                previousLabel=\"<<\"\n                forcePage={Number(paginationPage)}\n            />}\n        </Pagination>\n    )\n}","import { TypeAnimation } from \"react-type-animation\";\nimport styled from \"styled-components\";\n\nexport const TypingThing = styled(TypeAnimation)`\n    font-size: 26px;\n`\n","import  PropTypes  from \"prop-types\";\nimport { TypingThing } from './TypedTitle.styled';\n\nexport const TypedTitle = ({ typing }) => {\n\n    return (<>\n        <TypingThing\n            sequence={typing}\n        />\n    </>\n    )\n}\n\nTypedTitle.propTypes = {\n    typing: PropTypes.array.isRequired\n}","import { Loader } from \"components/Loader/Loader\";\nimport { MovieList } from \"components/MovieList/MovieList\";\nimport { STATUS } from \"constants\";\nimport { TypedTitle } from \"components/TypedTitle/TypedTitle\";\nimport { Error } from \"components/Error/Error\";\nimport { Filter } from \"components/Filters/Filters\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectGenres, selectIsFiltered, selectLanguage, selectPage, selectStatus } from \"redux/films/selectors\";\nimport { FilterWrapper } from \"components/Filters/Filters.styled\";\nimport { useEffect } from \"react\";\nimport { TrendingMovies, filteringMovies } from \"redux/films/operations\";\n\nconst Home = () => {\n    const status = useSelector(selectStatus);\n    const dispatch = useDispatch();\n    const currentPage = useSelector(selectPage);\n    const isFiltered = useSelector(selectIsFiltered);\n    const currentLanguage = useSelector(selectLanguage);\n    const genres = JSON.stringify(useSelector(selectGenres))\n\n    useEffect(() => {\n        if (isFiltered) {\n            dispatch(filteringMovies());\n        } else if (!isFiltered) {\n            dispatch(TrendingMovies());\n        }\n    }, [isFiltered, dispatch, currentPage, genres, currentLanguage])\n\n    return (\n        <>\n            {status === STATUS.PENDING && <Loader />}\n            {status === STATUS.REJECTED && <Error />}\n            <TypedTitle typing={['Trand', 1000, 'Trending movies of the day']} />\n            <FilterWrapper>\n                <Filter />\n                <MovieList />\n            </FilterWrapper>\n        </>\n    )\n}\n\nexport default Home;","// extracted by mini-css-extract-plugin\nexport default {\"pagination__container\":\"Pagination_pagination__container__lLLsM\",\"pagination__page\":\"Pagination_pagination__page__TofTv\",\"pagination__arrow\":\"Pagination_pagination__arrow__OhTwl\",\"selected\":\"Pagination_selected__DOumc\",\"disabled\":\"Pagination_disabled__jd-Re\"};"],"names":["ErrorWrapper","styled","props","theme","darkRed","red","ErrorMessage","devices","Error","Card","motion","PosterWrapper","Poster","Title","Rate","beige","rateType","cardVariants","initial","opacity","isOn","transition","type","MovieCard","id","poster","title","rate","path","currentLanguage","useSelector","selectLanguage","animate","variants","to","state","src","imagePath","alt","width","loading","toFixed","LANGUAGES","ListWrapper","Pagination","MovieList","location","useLocation","useSearchParams","page","searchParams","setSearchParams","currentPage","Number","get","useState","paginationPage","setPaginationPage","movies","selectMovies","totalPages","selectTotalPages","dispatch","useDispatch","isFiltered","selectIsFiltered","isFilteredRef","useRef","pagesCount","Math","ceil","useEffect","current","setPage","map","poster_path","vote_average","from","length","containerClassName","css","pageClassName","activeClassName","previousClassName","nextClassName","disabledClassName","breakLabel","nextLabel","onPageChange","event","selected","pageRangeDisplayed","pageCount","previousLabel","forcePage","TypingThing","TypeAnimation","TypedTitle","typing","sequence","status","selectStatus","selectPage","genres","JSON","stringify","selectGenres","filteringMovies","TrendingMovies","STATUS"],"sourceRoot":""}