{"version":3,"file":"static/js/247.a9bb3bba.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","components/Cast/Cast.styled.jsx","components/Movie/Movie.styled.jsx","helpers/api.js"],"sourcesContent":["import { getMovieCredits } from \"helpers/api\"\nimport { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\"\nimport { CastList, Actor, ActorCredits, Photo, CastTitle } from \"./Cast.styled\";\nimport { imagePath } from \"constants\";\nimport { MovieDetail } from \"components/Movie/Movie.styled\";\n\nconst Cast = () => {\n    const [cast, setCast] = useState([]);\n    const {movieId} = useParams();\n\n    useEffect(() => {\n        async function getCast() {\n            try {\n                const result = await getMovieCredits(movieId)\n                setCast(result.cast);\n            } catch (e) {\n                return;\n            }\n        }\n        getCast();\n    }, [movieId])\n\n    return (<>\n    <CastTitle>Cast</CastTitle>\n    {cast.length ? <CastList>\n        {cast.map(({id, character, profile_path, name}) => (<Actor key={id}>\n            <Photo\n            src={profile_path ? `${imagePath.default}${profile_path}` : imagePath.sample} \n            alt={character}/>\n            <ActorCredits><MovieDetail>Name:</MovieDetail> {name}</ActorCredits>\n            <ActorCredits><MovieDetail> Character:</MovieDetail> {character}</ActorCredits>\n            </Actor>))}\n        </CastList> : <p>No cast info</p>}\n    </>)\n}\n\nexport default Cast;","import { devices } from \"constants\";\nimport styled from \"styled-components\";\n\nexport const CastTitle = styled.h2`\nmargin-bottom: 10px;\n`\n\nexport const CastList = styled.ul`\ndisplay: flex;\nflex-direction: row;\nflex-wrap: wrap;\nmargin: -5px;\n`;\n\nexport const Actor = styled.li`\nwidth: calc((100% - 6 * 5px) / 3);\nmargin: 5px;\ndisplay: flex;\nflex-direction: column;\ngap: 8px;\n@media screen and (${devices.tablet}){\n    width: calc((100% - 10 * 5px) / 5);\n}\n@media screen and (${devices.desktop}){\n    width: calc((100% - 14 * 5px) / 7);\n}\n`\n\nexport const Photo = styled.img`\nwidth: 100%;\nheight: 150px;\nobject-fit: cover;\n`\n\nexport const ActorCredits = styled.p`\n    font-size: 14px;\n    font-family: 'Prompt', sans-serif;\n    line-height: 1.4;\n`","import { devices } from \"constants\";\nimport styled from \"styled-components\";\n\nexport const MovieWrapper = styled.div`\ndisplay: flex;\nflex-direction: column;\ngap: 20px;\nmargin-bottom: 20px;\n@media screen and (${devices.tablet}){\n    flex-direction: row;\n    gap: 30px;\n}\n@media screen and (${devices.desktop}) {\n    gap: 50px;        \n}\n`\nexport const PosterWrapper = styled.div`\n    border: 2px solid ${props => props.theme.red};\n    @media screen and (${devices.tablet}) {\n        height: 100%;\n        width: 40%;\n        flex-shrink: 0;\n    }\n    @media screen and (${devices.desktop}) {\n        width: 30%;\n    }\n`\n\nexport const Slogan = styled.li`\n    font-style: italic;\n    font-size: 16px;\n    @media screen and (${devices.tablet}) {\n        font-size: 14px;\n    }\n`\n\nexport const Poster = styled.img`\n    object-fit: cover;\n    width: 100%;\n    height: auto;\n`\n\nexport const MovieData = styled.ul`\n   display: flex;\n   flex-direction: column;\n   gap: 8px;\n   font-size: 16px;\n   @media screen and (${devices.desktop}) {\n     font-size: 20px;\n     gap: 12px;\n     line-height: 1.2;\n    }\n`\n\nexport const MovieDetail = styled.span`\n    background-color: ${props => props.theme.red};\n    color: ${props => props.theme.beige};\n    padding: 2px 3px;\n    border-radius: 8px;\n`","import axios from \"axios\";\n\nconst API_KEY = 'a5ff046cd300d2bbc6befba4bd859295';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TRENDING = '/trending/movie/day';\nconst SEARCH = '/search/movie';\nconst MOVIE = '/movie/'\n\nexport const getTrendingMovies = async (page = 1) => {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        page: page\n    })\n    const response = await axios.get(`${BASE_URL}${TRENDING}?${searchParams}`)\n    return response.data;\n}\n\nexport const searchMovies = async (query, page = 1) => {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n        query: query, \n        page: page\n    })\n    const response = await axios.get(`${BASE_URL}${SEARCH}?${searchParams}`);\n    return response.data\n}\n\nexport const getMovie = async (id) => {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n    })\n    const response = await axios.get(`${BASE_URL}${MOVIE}${id}?${searchParams}`);\n    return response.data\n}\n\nexport const getMovieReviews = async (id) => {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n    })\n    const response = await axios.get(`${BASE_URL}${MOVIE}${id}/reviews?${searchParams}`);\n    return response.data\n}\n\nexport const getMovieCredits = async (id) => {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n    })\n    const response = await axios.get(`${BASE_URL}${MOVIE}${id}/credits?${searchParams}`);\n    return response.data\n}\n\nexport const getMovieVideo= async (id) => {\n    const searchParams = new URLSearchParams({\n        api_key: API_KEY,\n    })\n    const response = await axios.get(`${BASE_URL}${MOVIE}${id}/videos?${searchParams}`);\n    return response.data\n}"],"names":["useState","cast","setCast","movieId","useParams","useEffect","getMovieCredits","result","getCast","length","map","id","character","profile_path","name","src","imagePath","alt","CastTitle","styled","CastList","Actor","devices","Photo","ActorCredits","MovieWrapper","PosterWrapper","props","theme","red","Slogan","Poster","MovieData","MovieDetail","beige","API_KEY","BASE_URL","TRENDING","SEARCH","MOVIE","getTrendingMovies","page","searchParams","URLSearchParams","api_key","axios","response","data","searchMovies","query","getMovie","getMovieReviews"],"sourceRoot":""}